# Shadow Warrior Makefile for Microsoft Make

RELEASE=1

# Engine options
#  USE_POLYMOST   - enables Polymost renderer
#  USE_OPENGL     - enables OpenGL support in Polymost
#     Define as 0 to disable OpenGL
#     Define as 1 (or 2) for GL 2.0/2.1 profile
#  USE_ASM        - enables the use of assembly code
USE_POLYMOST=1
USE_OPENGL=1
USE_ASM=1

EROOT=jfbuild
MACTROOT=jfmact
AUDIOLIBROOT=jfaudiolib

# Create Makefile.msvcuser yourself to provide your own overrides
# for configurable values
!if EXIST(Makefile.msvcuser)
!include Makefile.msvcuser
!endif

SRC=src
RSRC=rsrc
EINC=$(EROOT)\include
ELIB=$(EROOT)\src
INC=$(SRC)

o=obj
res=res

ENGINELIB=engine.lib
EDITORLIB=build.lib

flags_cl=
flags_rc=
!if "$(PLATFORM)" == "X64" || "$(PLATFORM)" == "x64"
flags_rc=/d_M_AMD64
USE_ASM=0
!elseif "$(PLATFORM)" == "ARM"
# Some day, perhaps.
USE_ASM=0
!else
flags_cl=/arch:IA32
!endif

!if $(RELEASE)
# release options
flags_cl=$(flags_cl) /Ox
flags_link=/RELEASE
!else
# debugging options
flags_cl=$(flags_cl) /Ot /Z7
flags_link=/DEBUG
!endif

ENGINEOPTS=/DRENDERTYPEWIN=1
!if $(USE_POLYMOST)
ENGINEOPTS=$(ENGINEOPTS) /DUSE_POLYMOST=$(USE_POLYMOST)
!endif
!if $(USE_OPENGL)
ENGINEOPTS=$(ENGINEOPTS) /DUSE_OPENGL=$(USE_OPENGL)
!endif
!if $(USE_ASM)
ENGINEOPTS=$(ENGINEOPTS) /DUSE_ASM=$(USE_ASM)
!endif

!include $(AUDIOLIBROOT)/Makefile.msvcshared

CC=cl
RC=rc
LINK=link
OURCFLAGS=/nologo /MD /J $(flags_cl)  \
	/I$(INC) /I$(EINC) /I$(MACTROOT) /I$(AUDIOLIBROOT)\include \
	$(ENGINEOPTS)
LIBS=user32.lib gdi32.lib shell32.lib ws2_32.lib comctl32.lib comdlg32.lib uxtheme.lib xinput9_1_0.lib
LINKFLAGS=/opt:ref /nologo $(flags_link) /LIBPATH:$(AUDIOLIBROOT)\third-party\msvc\lib$(PLATFORM)
RFLAGS=/nologo /i$(EINC) /i$(SRC) $(flags_rc)
EXESUFFIX=.exe

JMACTOBJ=$(MACTROOT)\util_lib.$o \
	$(MACTROOT)\file_lib.$o \
	$(MACTROOT)\control.$o \
	$(MACTROOT)\keyboard.$o \
	$(MACTROOT)\mouse.$o \
	$(MACTROOT)\mathutil.$o \
	$(MACTROOT)\scriplib.$o \
	$(MACTROOT)\animlib.$o

GAMEOBJS=$(SRC)\actor.$o \
	$(SRC)\ai.$o \
	$(SRC)\anim.$o \
	$(SRC)\border.$o \
	$(SRC)\break.$o \
	$(SRC)\bunny.$o \
	$(SRC)\cache.$o \
	$(SRC)\cheats.$o \
	$(SRC)\colormap.$o \
	$(SRC)\config.$o \
	$(SRC)\console.$o \
	$(SRC)\coolg.$o \
	$(SRC)\coolie.$o \
	$(SRC)\copysect.$o \
	$(SRC)\demo.$o \
	$(SRC)\draw.$o \
	$(SRC)\eel.$o \
	$(SRC)\game.$o \
	$(SRC)\girlninj.$o \
	$(SRC)\goro.$o \
	$(SRC)\grpscan.$o \
	$(SRC)\hornet.$o \
	$(SRC)\interp.$o \
	$(SRC)\interpsh.$o \
	$(SRC)\inv.$o \
	$(SRC)\jplayer.$o \
	$(SRC)\jsector.$o \
	$(SRC)\jweapon.$o \
	$(SRC)\lava.$o \
	$(SRC)\light.$o \
	$(SRC)\mclip.$o \
	$(SRC)\menus.$o \
	$(SRC)\miscactr.$o \
	$(SRC)\morph.$o \
	$(SRC)\net.$o \
	$(SRC)\ninja.$o \
	$(SRC)\panel.$o \
	$(SRC)\player.$o \
	$(SRC)\predict.$o \
	$(SRC)\quake.$o \
	$(SRC)\ripper.$o \
	$(SRC)\ripper2.$o \
	$(SRC)\rooms.$o \
	$(SRC)\rotator.$o \
	$(SRC)\rts.$o \
	$(SRC)\save.$o \
	$(SRC)\scrip2.$o \
	$(SRC)\sector.$o \
	$(SRC)\serp.$o \
	$(SRC)\setup.$o \
	$(SRC)\skel.$o \
	$(SRC)\skull.$o \
	$(SRC)\slidor.$o \
	$(SRC)\sounds.$o \
	$(SRC)\spike.$o \
	$(SRC)\sprite.$o \
	$(SRC)\sumo.$o \
	$(SRC)\swconfig.$o \
	$(SRC)\sync.$o \
	$(SRC)\text.$o \
	$(SRC)\track.$o \
	$(SRC)\vator.$o \
	$(SRC)\vis.$o \
	$(SRC)\wallmove.$o \
	$(SRC)\warp.$o \
	$(SRC)\weapon.$o \
	$(SRC)\zilla.$o \
	$(SRC)\zombie.$o \
	$(SRC)\saveable.$o \
	$(SRC)\gameres.$(res) \
	$(SRC)\startwin_game.$o \
	$(JMACTOBJ)

EDITOROBJS=$(SRC)\jnstub.$o \
	$(SRC)\brooms.$o \
	$(SRC)\bldscript.$o \
	$(SRC)\jbhlp.$o \
	$(SRC)\colormap.$o \
	$(SRC)\buildres.$(res)

# Source-control version stamping
!if [git --version >nul] == 0
GAMEOBJS=$(GAMEOBJS) $(SRC)\version-auto.$o
EDITOROBJS=$(EDITOROBJS) $(SRC)\version-auto.$o
!else
GAMEOBJS=$(GAMEOBJS) $(SRC)\version.$o
EDITOROBJS=$(EDITOROBJS) $(SRC)\version.$o
!endif

# RULES
{$(MACTROOT)}.c{$(MACTROOT)}.$o:
	$(CC) /c $(CFLAGS) $(OURCFLAGS) /Fo$@ $<

{$(SRC)}.c{$(SRC)}.$o:
	$(CC) /c $(CFLAGS) $(OURCFLAGS) /Fo$@ $<

{$(SRC)}.cpp{$(SRC)}.$o:
	$(CC) /c $(CFLAGS) $(OURCFLAGS) /Fo$@ $<

{$(SRC)}.rc{$(SRC)}.$(res):
	$(RC) $(RFLAGS) /fo$@ /r $<


# TARGETS
all: sw$(EXESUFFIX) build$(EXESUFFIX) ;

sw$(EXESUFFIX): $(GAMEOBJS) $(ELIB)\$(ENGINELIB) $(AUDIOLIBROOT)\$(JFAUDIOLIB)
	$(LINK) /OUT:$@ /SUBSYSTEM:WINDOWS $(LINKFLAGS) /MAP $** $(LIBS) $(JFAUDIOLIB_LINKFLAGS) msvcrt.lib

build$(EXESUFFIX): $(EDITOROBJS) $(ELIB)\$(ENGINELIB) $(ELIB)\$(EDITORLIB)
	$(LINK) /OUT:$@ /SUBSYSTEM:WINDOWS $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

!include Makefile.deps

enginelib editorlib: AlwaysBuild
	cd "$(EROOT)"
	$(MAKE) /f Makefile.msvc /$(MAKEFLAGS) USE_POLYMOST=$(USE_POLYMOST) USE_OPENGL=$(USE_OPENGL) USE_ASM=$(USE_ASM) $@
	cd "$(MAKEDIR)"

jfaudiolib: AlwaysBuild
	cd "$(AUDIOLIBROOT)"
	$(MAKE) /f Makefile.msvc /$(MAKEFLAGS) RELEASE=$(RELEASE)
	cd "$(MAKEDIR)"

$(SRC)\version-auto.c: AlwaysBuild
	cmd /c tools\generateversion.cmd > $@

AlwaysBuild: ;
$(ELIB)\$(EDITORLIB): editorlib ;
$(ELIB)\$(ENGINELIB): enginelib ;
$(AUDIOLIBROOT)\$(JFAUDIOLIB): jfaudiolib ;

# PHONIES
clean:
	-del /q $(GAMEOBJS) $(EDITOROBJS)
	cd "$(EROOT)"
	$(MAKE) /f Makefile.msvc $@
	cd "$(MAKEDIR)"
	cd "$(AUDIOLIBROOT)"
	$(MAKE) /f Makefile.msvc $@
	cd "$(MAKEDIR)"

veryclean: clean
	-del /q sw$(EXESUFFIX) build$(EXESUFFIX)
	cd "$(EROOT)"
	$(MAKE) /f Makefile.msvc $@
	cd "$(MAKEDIR)"
